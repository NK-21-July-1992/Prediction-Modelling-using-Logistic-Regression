Code for my Logistic Regression Model for predicting coronary heart disease by using Logistic Regression

##### Importing necessary Libraries ########
from sklearn.datasets import make_classification
from matplotlib import pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
import numpy as np
import pandas as pd


####Reading the data from the CSV file#####
data=pd.read_csv("heart_new.csv")
data.head()




##### Creating variables for accessing data ######
data.shape 
feature_cols = ['male','age','education','currentSmoker','cigsPerDay','BPMeds','prevalentStroke','prevalentHyp','diabetes','totChol','sysBP','diaBP','BMI','heartRate','glucose','TenYearCHD']

######Identifying Missing and NA values and filling them with NA####
data = data.fillna(0)
print(x_train)
x=data[feature_cols]
y=data.TenYearCHD
print(x)
print(y)

###### Getting the Count#####
data['TenYearCHD'].value_counts()
from matplotlib import pyplot as plt
import seaborn as sns
sns.countplot(x='TenYearCHD',data=data,palette="hls")
plt.show()

######Splitting the data in test and train######
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)

##### Predicting the Accuracy######
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)
from sklearn.linear_model import LogisticRegression
logmodel=LogisticRegression()
logmodel.fit(x_train,y_train)
y_pred=logmodel.predict(x_test)
print("accuracy",(logmodel.score(x_test,y_test)))

#######Printing Confusion Matrix######

from sklearn .metrics import confusion_matrix
confusion_matrix=confusion_matrix(y_test,y_pred)
print(confusion_matrix)

######Plotting the ROC Code######
from sklearn.metrics import roc_auc_score
from sklearn.metrics import roc_curve
logit_roc_auc = roc_auc_score(y_test, logmodel.predict(x_test))
fpr, tpr, thresholds = roc_curve(y_test, logmodel.predict_proba(x_test)[:,1])
plt.figure()
plt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)
plt.plot([0, 1], [0, 1],'r--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver operating characteristic')
plt.legend(loc="lower right")
plt.savefig('Log_ROC')
plt.show()
